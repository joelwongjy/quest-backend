name: Deploy to Production via SSH

on:
  push:
    branches: [production]

jobs:
  test:
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: quest
          POSTGRES_PASSWORD: quest
          POSTGRES_DB: quest_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-production-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-production-yarn-
      - name: Install dependencies
        run: yarn install
      - name: Run migrations
        run: chmod +x ./run_migrations.sh && ./run_migrations.sh -t
      - name: Run tests
        run: yarn test:ci
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: localhost
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
          POSTGRES_USERNAME: quest
          POSTGRES_PASSWORD: quest
          POSTGRES_NAME: quest_test
          POSTGRES_DISABLE_SSL: true
          JWT_SECRET: teamQuestIsTheBest
          NODE_ENV: test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-production-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-production-yarn-
      - name: Install dependencies
        run: yarn install
      - name: Build application
        run: yarn build
      - name: Copy /build folder to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_KEY }}
          rm: true
          source: "build/"
          target: "${{ secrets.REMOTE_DIR }}/build"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - name: Update application on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            cd ${{ secrets.REMOTE_DIR }}
            git checkout production
            git pull
            git reset --hard origin/production
            cd build/build
            mv * ..
            cd ..
            rm -rf build
            cd ..
            pm2 stop ecosystem.config.js --only production
            chmod +x ./backups/pg_backup.sh
            ./backups/pg_backup.sh ${{ secrets.REMOTE_DIR }}
            chmod +x ./run_migrations.sh
            ./run_migrations.sh -p
            cp .env.production ./build/
            cp ecosystem.config.js ./build/
            cp package.json ./build/
            cd build
            yarn install
            pm2 restart ecosystem.config.js --only production
            pm2 logs --nostream
